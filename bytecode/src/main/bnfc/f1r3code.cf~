-- A program is a collection of RSpaces (isomorphic to rho) together
   with a stack.
   
 NOP                 // No operation
 PUSH_INT n          // Push integer literal
 PUSH_STR s          // Push string literal
 PUSH_BOOL b         // Push boolean literal
 PUSH_PROC proc      // Push process to stack
 POP                 // Pop top of stack
 DUP                 // Duplicate top of stack
 LOAD_VAR n          // Load variable by index
 LOAD_LOCAL n        // Load local variable by index
 STORE_LOCAL n       // Store to local variable
 ALLOC_LOCAL         // Allocate new local slot
 BRANCH_TRUE L       // Conditional jump if true
 BRANCH_FALSE L      // Conditional jump if false
 BRANCH_SUCCESS L    // Branch if operation succeeded
 JUMP L              // Unconditional jump
 CMP_EQ              // Equality comparison
 CMP_NEQ             // Inequality comparison
 CMP_LT              // Less than comparison
 CMP_LTE             // Less than or equal
 CMP_GT              // Greater than comparison
 CMP_GTE             // Greater than or equal
 ADD                 // Arithmetic addition
 SUB                 // Arithmetic subtraction
 MUL                 // Arithmetic multiplication
 DIV                 // Arithmetic division
 MOD                 // Arithmetic modulo
 NEG                 // Arithmetic negation
 NOT                 // Logical NOT
 CONCAT              // String/collection concatenation
 DIFF                // Collection difference
 INTERPOLATE         // String interpolation
 CREATE_LIST n       // Create list from n stack elements
 CREATE_TUPLE n      // Create tuple from n stack elements
 CREATE_MAP n        // Create map from n key-value pairs on stack
 INVOKE_METHOD       // Method invocation

EVALUATION INSTRUCTIONS:
 EVAL                // Evaluate process on stack (with current locals)
 EVAL_BOOL           // Evaluate to boolean
 EVAL_STAR           // Explicit evaluation (star syntax)
 EXEC                // Execute process on stack

PATTERN MATCHING INSTRUCTIONS:
 PATTERN pat         // Load pattern
 MATCH_TEST          // Test pattern match (leaves boolean on stack)
 EXTRACT_BINDINGS    // Extract bound variables from pattern match

PROCESS CONTROL INSTRUCTIONS:
 SPAWN_ASYNC         // Spawn process asynchronously
 PROC_NEG            // Process negation

REFERENCE INSTRUCTIONS:
 COPY                // Copy value
 MOVE                // Move value
 REF                 // Create reference
 LOAD_METHOD name    // Load method name for invocation
RSpace Instructions (Type-Specific)
RSPACE INSTRUCTIONS:
 RSPACE_PRODUCE <type>          // Produce data to specified RSpace
 RSPACE_CONSUME <type>          // Consume data from specified RSpace (blocking)
 RSPACE_CONSUME_NONBLOCK <type> // Consume data from specified RSpace (non-blocking)
 RSPACE_PEEK <type>             // Peek at data without consuming
 RSPACE_MATCH <type>            // Pattern match against specified RSpace data
 RSPACE_SELECT <type>           // Atomic select operation across channels
 NAME_CREATE <type>             // Create fresh name in specified RSpace
 NAME_QUOTE <type>              // Quote process to name in specified RSpace
 NAME_UNQUOTE <type>            // Unquote name to process in specified RSpace
 PATTERN_COMPILE <type>         // Compile pattern for specified RSpace matching
 PATTERN_BIND <type>            // Bind pattern variables from specified RSpace match
 CONTINUATION_STORE <type>      // Store continuation in specified RSpace
 CONTINUATION_RESUME <type>     // Resume stored continuation from specified RSpace
 RSPACE_BUNDLE_BEGIN <type>     // Start bundle in specified RSpace
 RSPACE_BUNDLE_END <type>       // End bundle in specified RSpace